// Prisma schema for Tarot Quest Platform
// Generated by Codex

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ArcanaType {
  MAJOR
  MINOR
}

enum LayoutType {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum SpreadRole {
  SIGNIFICATOR
  PAST
  PRESENT
  FUTURE
  ADVICE
  OUTCOME
  BLOCKER
  SUPPORT
  CLARIFIER
  THEME
}

enum SessionStatus {
  CREATED
  DRAWN
  INTERPRETED
  CLOSED
}

enum LedgerEntryType {
  SESSION_REWARD
  ACHIEVEMENT
  ARTIFACT_PASSIVE
  REFERRAL
  ADJUSTMENT
  PENALTY
}

enum ArtifactCategory {
  COSMETIC
  MECHANICAL
}

enum QuestionnaireInputType {
  SELECT
  MULTISELECT
  SCALE
  TEXT
  BOOLEAN
}

model User {
  id               String           @id @default(uuid())
  externalId       String?          @unique
  email            String?          @unique
  displayName      String?
  locale           String           @default("ru")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  sessions         Session[]
  ledgerEntries    LedgerEntry[]
  artifacts        UserArtifact[]
  achievements     UserAchievement[]
  invites          Referral[]       @relation("ReferralInviter")
  referredReferral Referral?        @relation("ReferralInvitee")
  usageCounters    UsageCounter[]
}

model TarotSection {
  id            String            @id
  slug          String            @unique
  titleKey      String
  createdAt     DateTime          @default(now())
  templates     SpreadTemplate[]
  subcategories TarotSubcategory[]
}

model TarotSubcategory {
  id             String           @id
  sectionId      String
  slug           String           @unique
  titleKey       String
  descriptionKey String
  createdAt      DateTime         @default(now())
  section        TarotSection     @relation(fields: [sectionId], references: [id])
  templates      SpreadTemplate[]
  questionnaires Questionnaire[]
}

model SpreadTemplate {
  id             String           @id
  slug           String           @unique
  titleKey       String
  descriptionKey String?
  cardCount      Int
  isSequential   Boolean          @default(false)
  sectionId      String
  subcategoryId  String
  createdAt      DateTime         @default(now())
  section        TarotSection     @relation(fields: [sectionId], references: [id])
  subcategory    TarotSubcategory @relation(fields: [subcategoryId], references: [id])
  positions      SpreadPosition[]
  sessions       Session[]
}

model SpreadPosition {
  id             String        @id @default(uuid())
  templateId     String
  index          Int
  role           SpreadRole
  polarityWeight Float         @default(1)
  descriptionKey String?
  createdAt      DateTime      @default(now())
  template       SpreadTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  draws          CardDraw[]

  @@unique([templateId, index])
}

model Card {
  id        String        @id
  name      String
  arcana    ArcanaType
  suit      String?
  isMajor   Boolean
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  meanings  CardMeaning[]
  draws     CardDraw[]
}

model CardMeaning {
  id              Int                 @id @default(autoincrement())
  cardId          String
  locale          String              @default("ru")
  sphereContext   String
  layoutType      LayoutType
  meaningUp       String
  meaningRev      String
  advicePotential String
  notes           String?
  basePolarity    Float               @default(0)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  card            Card                @relation(fields: [cardId], references: [id], onDelete: Cascade)
  meaningTags     CardMeaningTag[]
  interpretations CardInterpretation[]

  @@index([cardId, locale])
}

model CardMeaningTag {
  id        Int         @id @default(autoincrement())
  meaningId Int
  tag       String
  meaning   CardMeaning @relation(fields: [meaningId], references: [id], onDelete: Cascade)

  @@unique([meaningId, tag])
}

model Questionnaire {
  id             String                @id
  subcategoryId  String
  locale         String                @default("ru")
  titleKey       String
  descriptionKey String?
  questions      QuestionnaireQuestion[]
  subcategory    TarotSubcategory      @relation(fields: [subcategoryId], references: [id])
}

model QuestionnaireQuestion {
  id              String                   @id
  questionnaireId String
  order           Int
  labelKey        String
  helperKey       String?
  inputType       QuestionnaireInputType
  options         QuestionnaireOption[]
  tags            String[]                @default([])
  questionnaire   Questionnaire           @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)

  @@unique([questionnaireId, order])
}

model QuestionnaireOption {
  id        String   @id
  questionId String
  value     String
  labelKey  String
  weight    Float    @default(0)
  question  QuestionnaireQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Session {
  id             String                @id @default(uuid())
  userId         String?
  templateId     String
  status         SessionStatus         @default(CREATED)
  locale         String                @default("ru")
  answers        SessionAnswer[]
  draws          CardDraw[]
  interpretation SessionInterpretation?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  completedAt    DateTime?
  ipHash         String?
  userAgent      String?
  template       SpreadTemplate        @relation(fields: [templateId], references: [id])
  user           User?                 @relation(fields: [userId], references: [id])
  ledgerEntries  LedgerEntry[]
  counters       UsageCounter[]
}

model SessionAnswer {
  id         String   @id @default(uuid())
  sessionId  String
  questionId String
  value      Json
  createdAt  DateTime @default(now())
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, questionId])
}

model CardDraw {
  id         String         @id @default(uuid())
  sessionId  String
  positionId String
  cardId     String
  isReversed Boolean        @default(false)
  drawnAt    DateTime       @default(now())
  session    Session        @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  position   SpreadPosition @relation(fields: [positionId], references: [id])
  card       Card           @relation(fields: [cardId], references: [id])
  interpretation CardInterpretation?

  @@unique([sessionId, positionId])
}

model CardInterpretation {
  id              String       @id @default(uuid())
  drawId          String       @unique
  meaningId       Int
  finalPolarity   Float
  influenceScore  Float
  adviceInjection String?
  explanation     Json
  createdAt       DateTime     @default(now())
  draw            CardDraw     @relation(fields: [drawId], references: [id], onDelete: Cascade)
  meaning         CardMeaning  @relation(fields: [meaningId], references: [id])
}

model SessionInterpretation {
  id         String   @id @default(uuid())
  sessionId  String   @unique
  summary    String
  advice     String
  notes      String?
  factors    Json
  totalScore Float
  createdAt  DateTime @default(now())
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model LedgerEntry {
  id             String          @id @default(uuid())
  userId         String?
  sessionId      String?
  type           LedgerEntryType
  amount         Int
  balanceAfter   Int
  descriptionKey String
  metadata       Json?
  occurredAt     DateTime        @default(now())
  user           User?           @relation(fields: [userId], references: [id])
  session        Session?        @relation(fields: [sessionId], references: [id])
}

model Artifact {
  id            String          @id
  slug          String          @unique
  nameKey       String
  descriptionKey String
  category      ArtifactCategory
  baseCost      Int
  passiveType   String
  createdAt     DateTime        @default(now())
  levels        ArtifactLevel[]
  userArtifacts UserArtifact[]
}

model ArtifactLevel {
  id           String   @id @default(uuid())
  artifactId   String
  level        Int
  cost         Int
  passiveValue Float
  effect       Json?
  createdAt    DateTime @default(now())
  artifact     Artifact @relation(fields: [artifactId], references: [id], onDelete: Cascade)

  @@unique([artifactId, level])
}

model UserArtifact {
  id         String   @id @default(uuid())
  userId     String
  artifactId String
  level      Int      @default(1)
  acquiredAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  artifact   Artifact @relation(fields: [artifactId], references: [id])

  @@unique([userId, artifactId])
}

model Achievement {
  id             String            @id
  slug           String            @unique
  nameKey        String
  descriptionKey String
  threshold      Int
  reward         Int
  createdAt      DateTime          @default(now())
  userProgress   UserAchievement[]
}

model UserAchievement {
  id             String   @id @default(uuid())
  userId         String
  achievementId  String
  progress       Int      @default(0)
  achievedAt     DateTime?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement    Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Referral {
  id            String   @id @default(uuid())
  code          String   @unique
  inviterId     String
  inviteeId     String?  @unique
  acceptedAt    DateTime?
  rewardGranted Boolean  @default(false)
  createdAt     DateTime @default(now())
  inviter       User     @relation("ReferralInviter", fields: [inviterId], references: [id])
  invitee       User?    @relation("ReferralInvitee", fields: [inviteeId], references: [id])
}

model UsageCounter {
  id        String   @id @default(uuid())
  userId    String?
  sessionId String?
  period    String
  templateId String
  count     Int      @default(0)
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([userId, period, templateId])
}
